---
#- name: "Create namespace role bindings for {{ WORKBENCH_NAMESPACE }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'rolebindings.yaml') }}"
#    validate_certs: false
#- name: "Create a Persistent Volume Claim for {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'persistentvolumeclaim.yaml') }}"
#    validate_certs: false
#- name: "Create a ConfigMap for Notebook for {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'configmap.yaml') }}"
#    validate_certs: false
#- name: "Create a Notebook for {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'notebook.yaml') }}"
#    validate_certs: false
#- name: Wait for workbench Ready condition
#  kubernetes.core.k8s_info:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    kind: Pod
#    label_selectors:
#      - "notebook-name={{ WORKBENCH_NAME }}"
#    wait: true
#    wait_timeout: 300
#    wait_condition:
#      type: Ready
#      status: 'True'
#- name: "Configure settings.json for workbench {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s_cp:
#    state: to_pod
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    container: "{{ WORKBENCH_NAME }}"
#    remote_path: /opt/app-root/src/.local/share/code-server/User/settings.json
#    content: |-
#      {
#        "window.autoDetectColorScheme": true,
#        "workbench.colorTheme": "Default Dark Modern",
#        "redhat.telemetry.enabled": true,
#        "java.inlayHints.parameterNames.enabled": "none"
#      }
#    validate_certs: false
#- name: "Configure vscode extensions for workbench {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s_cp:
#    state: to_pod
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    container: "{{ WORKBENCH_NAME }}"
#    remote_path: /opt/app-root/src/.vscode/extensions.json
#    content: |-
#      {
#        "recommendations": [
#          "ms-toolsai.jupyter"
#          , "redhat.java"
#          , "vscjava.vscode-java-debug"
#          , "vscjava.vscode-maven"
#        ]
#      }
#    validate_certs: false
#- name: "Configure keybindings.json for workbench {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s_cp:
#    state: to_pod
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    container: "{{ WORKBENCH_NAME }}"
#    remote_path: /opt/app-root/src/.local/share/code-server/User/keybindings.json
#    content: |-
#      // Place your key bindings in this file to override the defaultsauto[]
#      [
#          {
#              "key": "ctrl+p",
#              "command": "-extension.vim_ctrl+p",
#              "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
#          },
#          {
#              "key": "ctrl+f",
#              "command": "-extension.vim_ctrl+f",
#              "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
#          },
#          {
#              "key": "ctrl+c",
#              "command": "-extension.vim_ctrl+c",
#              "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
#          },
#          {
#              "key": "ctrl+y",
#              "command": "-extension.vim_ctrl+y",
#              "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl"
#          },
#          {
#              "key": "ctrl+w",
#              "command": "-extension.vim_ctrl+w",
#              "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
#          },
#          {
#              "key": "ctrl+h",
#              "command": "-extension.vim_ctrl+h",
#              "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
#          }
#      ]
#    validate_certs: false
#- name: "Create a symbolic link to project vars in home directory"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      ln -sf /opt/app-root/src/{{ SITE_NAME }}/vars.yaml /opt/app-root/src/vars.yaml
#- name: "Clone computate-base project"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -c 'git clone https://github.com/computate-org/computate-base.git /opt/app-root/src/computate-base;
#      (cd /opt/app-root/src/computate-base && mvn clean install)'
#- name: "Clone computate-search project"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -c 'git clone https://github.com/computate-org/computate-search.git /opt/app-root/src/computate-search;
#      (cd /opt/app-root/src/computate-search && mvn clean install)'
#- name: "Clone computate-vertx project"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -c 'git clone https://github.com/computate-org/computate-vertx.git /opt/app-root/src/computate-vertx;
#      (cd /opt/app-root/src/computate-vertx && mvn clean install)'
#- name: "Clone computate project"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -c 'git clone https://github.com/computate-org/computate.git /opt/app-root/src/computate;
#      (cd /opt/app-root/src/computate && mvn clean install)'
#- name: "Install python virtualenv"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      virtualenv /opt/app-root/src/python
#- name: "Configure .bashrc for workbench {{ WORKBENCH_NAME }}"
#  kubernetes.core.k8s_cp:
#    state: to_pod
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    container: "{{ WORKBENCH_NAME }}"
#    remote_path: /opt/app-root/src/.bashrc
#    content: |-
#      {{ lookup('template', 'bashrc', convert_data=false) | indent(width=6, first=false) | replace('\{\{\{','{{{') | replace('\{\{\>','{{>') | replace('\{\{\#','{{#') | replace('\{\%','{%') | replace('\{\{','{{') | replace('\}\}\}', '}}}') | replace('\}\}', '}}') | replace('\%\}', '%}') }}
#    validate_certs: false
#- name: "Install python dependencies"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      /opt/app-root/src/python/bin/pip install jupyterlab bash_kernel ansible kubernetes openshift jinja2 jmespath pika --upgrade
#- name: "Create solr computate collection"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ SITE_NAMESPACE }}"
#    pod: solr-0
#    command: >-
#      bash -c '
#      env SOLR_AUTH_TYPE=basic SOLR_AUTHENTICATION_OPTS="-Dbasicauth=$SOLR_ADMIN_USERNAME:$SOLR_ADMIN_PASSWORD" /opt/bitnami/solr/bin/solr create_collection --solr-url http://localhost:8983 -c computate-{{ WORKBENCH_NAME }} -n computate
#      '
#  ignore_errors: true
#- name: "Create solr site collection"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ SITE_NAMESPACE }}"
#    pod: solr-0
#    command: >-
#      bash -c '
#      env SOLR_AUTH_TYPE=basic SOLR_AUTHENTICATION_OPTS="-Dbasicauth=$SOLR_ADMIN_USERNAME:$SOLR_ADMIN_PASSWORD" /opt/bitnami/solr/bin/solr create_collection --solr-url http://localhost:8983 -c smartaquaculture-{{ WORKBENCH_NAME }} -n computate
#      '
#  ignore_errors: true
#- name: "Index the computate-search classes"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -i -c '
#        cd /opt/app-root/src;
#        eval $(./vars.py);
#        env VARS_PATH=$COMPUTATE_SEARCH_SRC/vars.yaml \
#          SITE_PATH=$COMPUTATE_SEARCH_SRC \
#          COMPUTATE_SRC=$COMPUTATE_SRC \
#          COMPUTATE_VERTX_SRC=$COMPUTATE_VERTX_SRC \
#          SITE_LANG=enUS \
#          $COMPUTATE_SRC/bin/enUS/index.sh
#        '
#- name: "Index the computate-vertx classes"
#  kubernetes.core.k8s_exec:
#    namespace: "{{ WORKBENCH_NAMESPACE }}"
#    pod: "{{ WORKBENCH_NAME }}-0"
#    command: >-
#      bash -i -c '
#        cd /opt/app-root/src;
#        eval $(./vars.py);
#        env VARS_PATH=$COMPUTATE_VERTX_SRC/vars.yaml \
#          SITE_PATH=$COMPUTATE_VERTX_SRC \
#          COMPUTATE_SRC=$COMPUTATE_SRC \
#          COMPUTATE_VERTX_SRC=$COMPUTATE_VERTX_SRC \
#          SITE_LANG=enUS \
#          $COMPUTATE_SRC/bin/enUS/index.sh
#        '
- name: "Create a postgres secret in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'postgres-secret.yaml') }}"
    validate_certs: false
  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('postgres-pguser-' + SITE_SHORT_NAME), namespace=WORKBENCH_NAMESPACE)[0].data['password'] | default('')) == ''
- name: "Create database user and password"
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "postgresql-0"
    command: >-
      env PGPASSWORD="{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgresql'), namespace=WORKBENCH_NAMESPACE)[0].data['postgres-password'] | b64decode }}"
      psql -U postgres postgres -c
      "create user {{ DATABASE_USERNAME }} password '{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgres-pguser-' + SITE_SHORT_NAME), namespace=WORKBENCH_NAMESPACE)[0].data['password'] | b64decode }}'"
  ignore_errors: true
- name: "Create database"
  kubernetes.core.k8s_exec:
    namespace: "{{ WORKBENCH_NAMESPACE }}"
    pod: "postgresql-0"
    command: >-
      env PGPASSWORD="{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgresql'), namespace=WORKBENCH_NAMESPACE)[0].data['postgres-password'] | b64decode }}"
      psql -U postgres postgres -c
      "create database {{ DATABASE_DATABASE }} owner {{ DATABASE_USERNAME }}"
  ignore_errors: true
- name: "Create service in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'service.yaml') }}"
    validate_certs: false
- name: "Create network policy in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'networkpolicy.yaml') }}"
    validate_certs: false
- name: "Create route in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'route.yaml') }}"
    validate_certs: false
