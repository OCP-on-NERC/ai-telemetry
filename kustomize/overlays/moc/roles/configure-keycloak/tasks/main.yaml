---

#- name: Create keycloak Namespace
#  kubernetes.core.k8s:
#    state: present
#    kind: Namespace
#    name: keycloak
#    validate_certs: false
#- name: "Install keycloak-initial-admin secret on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'keycloak-initial-admin-secret.yaml') }}"
#    validate_certs: false
#  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | default('')) == ''
#- name: "Install postgres-pguser-keycloak secret on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'postgres-pguser-keycloak-secret.yaml') }}"
#    validate_certs: false
#  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('postgres-pguser-keycloak'), namespace='keycloak')[0].data['password'] | default('')) == ''
#- name: "Create the postgres database user keycloak"
#  kubernetes.core.k8s_exec:
#    namespace: postgres
#    pod: postgresql-0
#    command: >-
#      env PGPASSWORD="{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgresql'), namespace='postgres')[0].data['postgres-password'] | b64decode }}" 
#        psql -U postgres postgres -c "create user keycloak password '{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgres-pguser-keycloak'), namespace='keycloak')[0].data['password'] | b64decode }}';"
#  ignore_errors: true
#- name: "Create the postgres database keycloak"
#  kubernetes.core.k8s_exec:
#    namespace: postgres
#    pod: postgresql-0
#    command: >-
#      env PGPASSWORD="{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('postgresql'), namespace='postgres')[0].data['postgres-password'] | b64decode }}" 
#        psql -U postgres postgres -c "create database keycloak owner keycloak;"
#  ignore_errors: true
#- name: Deploy keycloak
#  kubernetes.core.helm:
#    release_namespace: keycloak
#    chart_ref: oci://registry-1.docker.io/bitnamicharts/keycloak
#    name: keycloak
#    chart_version: 21.7.1
#    values:
#      postgresql:
#        enabled: false
#      externalDatabase:
#        host: postgresql.postgres.svc
#        user: keycloak
#        existingSecret: postgres-pguser-keycloak
#        existingSecretPasswordKey: password
#        database: keycloak
#        port: 5432
#      tls:
#        enabled: true
#        autoGenerated: true
#      ingress:
#        enabled: true
#        hostname: keycloak.apps-crc.testing
#        tls: true
#        selfSigned: true
#      extraEnvVars:
#        # - name: KC_FEATURES
#        #   value: oid4vc-vci
#        - name: KC_HOSTNAME
#          value: https://keycloak.apps-crc.testing
#      production: true
#      image:
#        tag: 26.0.7
#      auth:
#        existingSecret: keycloak-initial-admin
#        adminUser: admin
#        passwordSecretKey: admin-password
#    validate_certs: false
#- name: Wait for keycloak Ready condition
#  kubernetes.core.k8s_info:
#    namespace: keycloak
#    kind: Pod
#    label_selectors:
#      - app.kubernetes.io/name=keycloak
#    wait: true
#    wait_timeout: 300
#    wait_condition:
#      type: Ready
#      status: 'True'
#
#- name: "Install group-sync-operator bundle on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('kubernetes.core.kustomize', dir='kustomize/cluster-scope/bundles/group-sync-operator/') }}"
#    validate_certs: false
#- name: "Install github-group-sync secret on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'github-group-sync-secret.yaml') }}"
#    validate_certs: false
#  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('github-group-sync'), namespace='group-sync-operator')[0].data['privateKey'] | default('')) == ''
#- name: "Install groupsync on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'groupsync.yaml') }}"
#    validate_certs: false
#- name: "Install cluster-admin ClusterRoleBinding for group {{ CLUSTER_ADMIN_GROUP }} on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'cluster-admin-group-role-binding.yaml') }}"
#    validate_certs: false
#- name: "Install OAuth with GITHUB_OPENSHIFT_CLIENT on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'oauth.yaml') }}"
#    validate_certs: false
#
#- name: Configure keycloak realm
#  community.general.keycloak_realm:
#    validate_certs: false
#    auth_client_id: admin-cli
#    auth_keycloak_url: "{{ AUTH_URL }}"
#    auth_realm: master
#    auth_username: admin
#    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
#    state: present
#    id: "{{ AUTH_REALM }}"
#    realm: "{{ AUTH_REALM }}"
#    enabled: true
#    displayName: "{{ AUTH_REALM }}"
#    registrationAllowed: false
#    resetPasswordAllowed: true
#    editUsernameAllowed: false
#    rememberMe: true
#    verifyEmail: false
#    loginWithEmailAllowed: false

- name: "Configure keycloak client scope openid"
  community.general.keycloak_clientscope:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: admin
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
    state: present
    id: "{{ AUTH_REALM }}-openid"
    realm: "{{ AUTH_REALM }}"
    name: "openid"
    description: A client scope for the openid client
    protocol: openid-connect
    attributes:
      include.in.token.scope: 'true'
    protocolMappers:
      - config:
          access.token.claim: 'true'
          introspection.token.claim: 'true'
        id: "{{ AUTH_REALM }}-openid-sub"
        name: "sub"
        protocol: openid-connect
        protocolMapper: oidc-sub-mapper

- name: "Configure keycloak client scope {{ AUTH_CLIENT }}"
  community.general.keycloak_clientscope:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: admin
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
    state: present
    id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
    realm: "{{ AUTH_REALM }}"
    name: "{{ AUTH_CLIENT }}"
    description: A client scope for the {{ AUTH_CLIENT }} client
    protocol: openid-connect
    attributes:
      include.in.token.scope: 'true'
    protocolMappers:
      - config:
          access.token.claim: 'true'
          id.token.claim: 'false'
          included.client.audience: '{{ AUTH_CLIENT }}'
        id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
        name: "{{ AUTH_CLIENT }}"
        protocol: openid-connect
        protocolMapper: oidc-audience-mapper
#
#- name: "Install keycloak-identity-provider secret on OpenShift"
#  kubernetes.core.k8s:
#    state: present
#    definition: "{{ lookup('template', 'keycloak-identity-provider-secret.yaml') }}"
#    validate_certs: false
#  when: (query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-identity-provider'), namespace='keycloak')[0].data['GITHUB_KEYCLOAK_SECRET'] | default('')) == ''
#- name: Configure Keycloak GitHub identity provider
#  community.general.keycloak_identity_provider:
#    state: present
#    validate_certs: false
#    auth_client_id: admin-cli
#    auth_keycloak_url: "{{ AUTH_URL }}"
#    auth_realm: master
#    auth_username: admin
#    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
#    enabled: true
#    realm: "{{ AUTH_REALM }}"
#    providerId: github
#    alias: github
#    displayName: GitHub
#    trustEmail: true
#    storeToken: false
#    addReadTokenRoleOnCreate: false
#    authenticateByDefault: false
#    linkOnly: false
#    config:
#      syncMode: "LEGACY"
#      clientId: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-identity-provider'), namespace='keycloak')[0].data['GITHUB_KEYCLOAK_CLIENT'] | b64decode }}"
#      clientSecret: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-identity-provider'), namespace='keycloak')[0].data['GITHUB_KEYCLOAK_SECRET'] | b64decode }}"

- name: "Disable RSA-OAEP key component from {{ AUTH_REALM }}"
  community.general.keycloak_component:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: admin
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
    state: absent
    name: rsa-enc-generated
    parent_id: "{{ AUTH_REALM }}"
    provider_id: rsa-enc-generated
    provider_type: org.keycloak.keys.KeyProvider

- name: "Configure OpenShift client {{ AUTH_CLIENT }}"
  community.general.keycloak_client:
    state: present
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: admin
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
    realm: "{{ AUTH_REALM }}"
    id: "{{ AUTH_CLIENT }}"
    name: "{{ AUTH_CLIENT }}"
    clientId: "{{ AUTH_CLIENT }}"
    standardFlowEnabled: true
    serviceAccountsEnabled: true
    authorizationServicesEnabled: true
    frontchannelLogout: true
    publicClient: false
    protocol: openid-connect
    redirectUris: "{{ lookup('template', 'keycloak-redirect-uris.yaml') | from_yaml }}"
    defaultClientScopes:
      - openid
      - profile
      - "{{ AUTH_CLIENT }}"
    authorizationSettings:
      decisionStrategy: AFFIRMATIVE

- name: Get a new Keycloak client secret, passing client_id instead of id
  community.general.keycloak_clientsecret_info:
    validate_certs: false
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ AUTH_URL }}"
    auth_realm: master
    auth_username: admin
    auth_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=('keycloak-initial-admin'), namespace='keycloak')[0].data['admin-password'] | b64decode }}"
    client_id: '{{ AUTH_CLIENT }}'
    realm: "{{ AUTH_REALM }}"
  register: AUTH_CLIENT_SECRET
  no_log: true

- name: "Install {{ 'keycloak-client-' + (AUTH_CLIENT | lower ) }} secret in namespace {{ WORKBENCH_NAMESPACE }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'auth-client-secret.yaml') }}"
    validate_certs: false
  loop: "{{ WORKBENCH_NAMES }}"
  vars:
    WORKBENCH_NAMESPACE: "workbench-{{ WORKBENCH_NAME }}"
  loop_control:
    loop_var: WORKBENCH_NAME
    index_var: WORKBENCH_INDEX

