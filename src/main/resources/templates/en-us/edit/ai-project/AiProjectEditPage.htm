{% extends "en-us/edit/ai-project/AiProjectGenEditPage.htm" %}
{%- block htmBodyStartAiProjectPage %}
{{ super() }}
<wa-details open class="HtmRow" id="observability-dashboard">
  <div slot="summary">
    Observability dashboard for cluster {{ result.clusterName }} project {{ result.projectName }}
  </div>
  <div class="wa-stack ">
    <div class="wa-grid ">
      <wa-card with-header>
        <header slot="header" class="wa-heading-l ">GPU temperature per GPU device in cluster {{ result.clusterName }} project {{ result.projectName }}</header>
        <div id="visualization-cluster-gpu-temperature" class="wa-grid "></div>
      </wa-card>
    </div>
    <div class="wa-grid ">
      <wa-card with-header>
        <header slot="header" class="wa-heading-l ">GPU utilization per GPU device in cluster {{ result.clusterName }} project {{ result.projectName }}</header>
        <div id="visualization-cluster-gpu-utilization" class="wa-grid "></div>
      </wa-card>
    </div>
  </div>
</wa-details>
{%- endblock htmBodyStartAiProjectPage %}
{%- block htmStyleAiProjectPage %}
#visualization-cluster-gpu-nodes, #visualization-cluster-gpu-devices {
  wa-avatar {
    --size: 3em;
  }
}
#observability-dashboard {
  .pill {
    border-radius: var(--wa-border-radius-pill);
    box-shadow: var(--wa-theme-glossy-inner-shine), var(--wa-theme-glossy-top-highlight), inset 0 .7rem 0 0 rgba(255, 255, 255, 0.1), var(--wa-theme-glossy-lower-shade), var(--wa-theme-glossy-bottom-shadow);
    &:hover {
     background-color: var(--background-color-hover, var(--background-color));
      border-color: var(--border-color-hover, var(--border-color, var(--background-color-hover)));
      color: var(--text-color-hover, var(--text-color));
    }
  }
}
{%- endblock htmStyleAiProjectPage %}
{%- block htmScriptsAiProjectPage %}
{{ super() }}
  <script type="module">
    Promise.all([
      customElements.whenDefined('wa-button')
      , customElements.whenDefined('wa-input')
    ]).then(() => {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 1));
      var query = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '5'
      };

      Promise.all([
          queryGpuTemperature()
          , queryGpuUtilization()
          ]);
    });

    async function queryGpuTemperature() {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 24));
      var timeQuery = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '100'
      };
      var query = Object.assign(Object.assign({ query: 'DCGM_FI_DEV_MEMORY_TEMP{cluster="{{ result.clusterName }}",exported_namespace="{{ result.projectName }}"}' }, timeQuery));
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query_range?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var end = new Date();
          var start = new Date(new Date().setHours(end.getHours() - 1));

          var panelId = 'visualization-cluster-gpu-temperature';
          var traces = [];
          var results = responseJson.data.result;
          results.forEach((result, i) => {
            traces.push({
              x: result.values.map(values => new Date(values[0]))
              , y: result.values.map(values => parseFloat(values[1]))
              , mode: 'lines+markers'
              , name: result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName
              , text: result.values.map(values => '<a href="/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node + '">' + result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName + '</a>')
            });
          });

          var layout = {
          };
          Plotly.newPlot(panelId, traces, layout);
        });
      } else {
        throw new Error(`Failed to query nodes not ready: ${response.status}`);
      }
    }

    async function queryGpuUtilization() {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 24));
      var timeQuery = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '100'
      };
      var query = Object.assign(Object.assign({ query: 'DCGM_FI_DEV_GPU_UTIL{cluster="{{ result.clusterName }}",exported_namespace="{{ result.projectName }}"}' }, timeQuery));
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query_range?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var end = new Date();
          var start = new Date(new Date().setHours(end.getHours() - 1));

          var panelId = 'visualization-cluster-gpu-utilization';
          var traces = [];
          var results = responseJson.data.result;
          results.forEach((result, i) => {
            traces.push({
              x: result.values.map(values => new Date(values[0]))
              , y: result.values.map(values => parseFloat(values[1]))
              , mode: 'lines+markers'
              , name: result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName + ' device ' + result.metric.gpu
              , text: result.values.map(values => '<a href="/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node + '">' + result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName + ' device ' + result.metric.gpu + '</a>')
            });
          });

          var layout = {
          };
          Plotly.newPlot(panelId, traces, layout);
        });
      } else {
        throw new Error(`Failed to query nodes not ready: ${response.status}`);
      }
    }
  </script>
{%- endblock htmScriptsAiProjectPage %}
