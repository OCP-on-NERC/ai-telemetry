{% extends "en-us/PageLayout.htm" %}
{%- block htmTitlePageLayout %}
{%- block htmTitleAiNodePage %}
    <title>{{ result.title }}</title>
{%- endblock htmTitleAiNodePage %}
{%- endblock htmTitlePageLayout %}

{%- block htmStylesPageLayout %}
{{ super() }}
    <link rel="stylesheet" href="{{ staticBaseUrl }}/css/en-us/search/ai-node/AiNode.css"/>
{%- block htmStylesAiNodePage %}
{%- endblock htmStylesAiNodePage %}
{%- endblock htmStylesPageLayout %}

{%- block htmStylePageLayout %}
{{ super() }}
{%- block htmStyleAiNodePage %}
{%- endblock htmStyleAiNodePage %}
{%- endblock htmStylePageLayout %}

{%- block htmScriptsPageLayout %}
{{ super() }}
{%- block htmScriptsAiNodePage %}
    <script src="{{staticBaseUrl}}/js/en-us/search/ai-node/AiNode.js"></script>
    <script type="module" src="{{staticBaseUrl}}/js/en-us/search/ai-node/AiNodeSearchPage.js"></script>
    <script type="module" src="{{staticBaseUrl}}/js/en-us/search/ai-node/AiNodeEditPage.js"></script>
{%- endblock htmScriptsAiNodePage %}
{%- endblock htmScriptsPageLayout %}

{%- block htmScriptPageLayout %}
{%- block htmScriptAiNodePage %}
    <script>

      function jsWebsocketAiNode(entityId, vars, $response) {
{%- block jsWebsocketAiNodePage %}{%- endblock %}
      }

      function jsTooltipAiNode(e, feature) {
{%- block jsTooltipAiNodePage %}{%- endblock %}
      }

      function htmTooltipAiNode(feature, layer) {
        return `{%- block htmTooltipAiNodePage %}
<h3><i class="{{ classIconCssClasses }}  "></i><a href="${quoteattr(feature.properties.editPage)}">${feature.properties.title}</a></h3>
{%- endblock htmTooltipAiNodePage %}`;
      }

      function jsLegendAiNode(map) {
{%- block jsLegendAiNodePage %}
        var div = L.DomUtil.create('div', 'info legend');
        var htm = '';
        window.listAiNode.forEach((result, index) => {
          if(result.location) {
            var shapes = [];
            if(Array.isArray(result.location))
              shapes = shapes.concat(result.location);
            else
              shapes.push(result.location);
            shapes.forEach(function(shape, index) {
              htm += htmLegendAiNode(map, shape, result, index, shapes.length);
            });
          }
        });
        div.innerHTML = htm;
        return div;
{%- endblock jsLegendAiNodePage %}
      }

      function htmLegendAiNode(map, shape, result, index, count) {
        var color = result.locationColors[index];
        var title = result.locationTitles[index];
        var url = result.locationLinks[index];
        var htm = '';
        htm += `<div class="cursor-pointer " style="max-width: 400px; ">
`;
        htm += `{%- block htmLegendAiNodePage %}
    <div title="${quoteattr(title)}">
    <div style="width: 20px; ">
      <i class="fa-light fa-circle" style="color: ${color}; "></i>
    </div>
    <div class="text-overflow-ellipsis ">
      <span class="" data-solrId="${result.solrId}" onclick="window.mapLayers[this.getAttribute('data-solrId')].openPopup(); return false;" href="">${title}</span>
    </div>
    </div>
{%- endblock htmLegendAiNodePage %}`;
        htm += `
</div>
`;
        return htm;
      }

      function jsStyleAiNode(feature) {
{%- block jsStyleAiNodePage %}
        if(feature.geometry.type == 'Point') {
          return {
            radius: 8
            , fillColor: (feature.properties.areaServedColors && feature.properties.areaServedColors[feature.index] ? feature.properties.areaServedColors[feature.index] : (feature.properties.color ? feature.properties.color : '#000'))
            , color: (feature.properties.areaServedColors && feature.properties.areaServedColors[feature.index] ? feature.properties.areaServedColors[feature.index] : (feature.properties.color ? feature.properties.color : '#000'))
            , weight: 1
            , opacity: 0.7
            , fillOpacity: 0.7
          };
        } else if(feature.geometry.type == 'LineString') {
          return {
            color: (feature.properties.areaServedColors && feature.properties.areaServedColors[feature.index] ? feature.properties.areaServedColors[feature.index] : (feature.properties.color ? feature.properties.color : '#000'))
            , weight: 5
            , opacity: 0.7
          };
        } else {
          return {
             fillColor: (feature.properties.areaServedColors && feature.properties.areaServedColors[feature.index] ? feature.properties.areaServedColors[feature.index] : (feature.properties.color ? feature.properties.color : '#000'))
            , color: (feature.properties.areaServedColors && feature.properties.areaServedColors[feature.index] ? feature.properties.areaServedColors[feature.index] : (feature.properties.color ? feature.properties.color : '#000'))
            , weight: 3
            , opacity: 0.7
            , fillOpacity: 0.7
          };
        }
{%- endblock jsStyleAiNodePage %}
      }
    </script>
    <script type="module">
{% if DEFAULT_MAP_LOCATION is defined %}
      window.DEFAULT_MAP_LOCATION = { lat: {{ DEFAULT_MAP_LOCATION.lat }}, lon: {{ DEFAULT_MAP_LOCATION.lon }} };
{% endif %}
{% if DEFAULT_MAP_ZOOM is defined %}
      window.DEFAULT_MAP_ZOOM = {{ DEFAULT_MAP_ZOOM }};
{% endif %}
      window.DEFAULT_ZONE_ID = '{{ defaultZoneId }}';
      Promise.all([
        customElements.whenDefined('sl-button')
        , customElements.whenDefined('sl-input')
      ]).then(() => {

        var entityId = {% if result.entityId is defined %}{{ result.entityId | tojson }}{% else %}null{% endif %};

        if(entityId == null) {
          document.querySelector('#grid-toggle-details')?.addEventListener('click', () => {
            document.querySelector('#site-results-grid').classList.remove('grid-mode-list', 'grid-mode-card');
            document.querySelector('#site-results-grid').classList.add('grid-mode-details');
          });
          document.querySelector('#grid-toggle-list')?.addEventListener('click', () => {
            document.querySelector('#site-results-grid').classList.remove('grid-mode-details', 'grid-mode-card');
            document.querySelector('#site-results-grid').classList.add('grid-mode-list');
          });
          document.querySelector('#grid-toggle-card')?.addEventListener('click', () => {
            document.querySelector('#site-results-grid').classList.remove('grid-mode-details', 'grid-mode-list');
            document.querySelector('#site-results-grid').classList.add('grid-mode-card');
          });
        } else {
          var o = document.querySelector('.pageForm .result')?.value;
          if(o)
            window.result = JSON.parse(o);
        {% if entityId is defined %}
        {% endif %}
        }
        var l = document.querySelector('.pageForm .listAiNode')?.value;
        if(l)
          window.listAiNode = JSON.parse(l);
        window.varsFq = JSON.parse('{{ toJsonObjectStringInApostrophes(varsFq) }}');
        window.varsRange = JSON.parse('{{ toJsonObjectStringInApostrophes(varsRange) }}');
        window.defaultRangeVar = '{{ defaultRangeVar }}';
        pageGraphAiNode();
        {% for key, value in varsQ.items() %}

        document.querySelector('#qAiNode_{{ key }}')?.addEventListener('sl-{% if var == 'objectSuggest' %}keyup{% else %}change{% endif %}', event => {
          qChange('AiNode', event.target, document.querySelector('#qAiNodeDiv_{{ key }}'));
        });
        {% endfor %}

        document.querySelector('#qAiNode_rows')?.addEventListener('sl-change', event => {
          paramChange('AiNode', event.target, document.querySelector('#qAiNodeDiv_rows'));
        });

        document.querySelector('#qAiNode_start')?.addEventListener('sl-change', event => {
          paramChange('AiNode', event.target, document.querySelector('#qAiNodeDiv_start'));
        });


        var submitForm_patchAiNode = document.querySelector('#htmForm_patchAiNode')?.addEventListener('submit', event => {
          event.preventDefault();
          return false;
        });
        document.querySelector('#htmFormButton_patchAiNode')?.addEventListener('click', event => {
          event.preventDefault();
          patchAiNode(null, document.querySelector('#htmForm_patchAiNode'), document.querySelector('#htmFormButton_patchAiNode'), event.target.getAttribute('data-entityId'));
          return false;
        });

        var submitForm_postAiNode = document.querySelector('#htmForm_postAiNode')?.addEventListener('submit', event => {
          event.preventDefault();
          return false;
        });
        document.querySelector('#htmFormButton_postAiNode')?.addEventListener('click', event => {
          event.preventDefault();
          postAiNode(document.querySelector('#htmForm_postAiNode'), document.querySelector('#htmFormButton_postAiNode'), (response, target) => { response.json().then((json) => { window.location.href = json.editPage; }); });
          return false;
        });

        var submitForm_deleteAiNode = document.querySelector('#htmForm_deleteAiNode')?.addEventListener('submit', event => {
          event.preventDefault();
          return false;
        });
        document.querySelector('#htmFormButton_deleteAiNode')?.addEventListener('click', event => {
          event.preventDefault();
          deleteAiNode(event.target, event.target.getAttribute('data-entityId'));
          return false;
        });

        var submitForm_putimportAiNode = document.querySelector('#htmForm_putimportAiNode')?.addEventListener('submit', event => {
          event.preventDefault();
          return false;
        });
        document.querySelector('#htmFormButton_putimportAiNode')?.addEventListener('click', event => {
          event.preventDefault();
          putimportAiNode(document.querySelector('#htmForm_putimportAiNode'), document.querySelector('#htmFormButton_putimportAiNode'));
          return false;
        });

        var submitForm_searchpageAiNode = document.querySelector('#htmForm_searchpageAiNode')?.addEventListener('submit', event => {
          event.preventDefault();
          return false;
        });
        document.querySelector('#htmFormButton_searchpageAiNode')?.addEventListener('click', event => {
          event.preventDefault();
          searchpageAiNode();
          return false;
        });
      });
    </script>
{%- endblock htmScriptAiNodePage %}
{%- endblock htmScriptPageLayout %}

{%- block websocketPageLayout %}
{%- block websocketAiNodePage %}
        window.eventBus = new EventBus('/eventbus');
        window.eventBus.enableReconnect(true);
        websocketAiNode(websocketAiNodeInner);
{%- endblock websocketAiNodePage %}
{%- endblock websocketPageLayout %}

{%- block htmUrlAiNodePage %}{{pageUri}}?q={{query.q}}&amp;rows={% if rows is defined %}{{rows}}{% else %}{{pagination.rows}}{% endif %}&amp;rows={% if start is defined %}{{start}}{% else %}{{pagination.start}}{% endif %}{% for item query.fq %}{% if fq == item %}{% else %}&fq={{fq}}:{{val}}{% endif %}{% endfor %}{% for item in query.sort %}{% if sort == item %}{% else %}&sort={{var}} {{order}}{% endif %}{% endfor %}{%- endblock htmUrlAiNodePage %}

{%- block htmBodyStartPageLayout %}
    {{ super() }}
{%- block htmBodyStartAiNodePage %}
{%- endblock htmBodyStartAiNodePage %}
{%- endblock htmBodyStartPageLayout %}

{%- block htmBodyMiddlePageLayout %}
{%- block htmBodyMiddleAiNodePage %}
{%- include en-us/search/ai-node/AiNodeSidebar.htm %}
{%- include en-us/search/ai-node/AiNodeSuggestedSearch.htm %}
        <div class="main-content">
{% if resultCount == 0 %}
          <sl-tooltip for="return-to-AiNode">back to all AI nodes</sl-tooltip>
        <div>
            <sl-button id="return-to-AiNode" variant="primary" href="{{ SITE_BASE_URL }}{{ pageUri }}">
              <i class="fa-solid fa-angle-left"></i>
              all AI nodes
            </sl-button>
          </sl-tooltip>
        </div>
        <h1><i class="fa-regular fa-computer"></i> <span>AI nodes</span></h1>
{% include en-us/search/ai-node/AiNodeSearchButtons.htm %}
{% include en-us/search/ai-node/AiNodeSearchForm.htm %}
        <h2>
          <span>
  {% if classIconCssClasses is defined %}
            <i class="{{ classIconCssClasses }}  site-menu-icon "></i>
  {% endif %}
            <span class="">no AI node found</span>
          </span>
        </h2>
{% else %}
  {% if resultCount == 1 %}
    {% if solrId is defined %}
          <div class="margin-block">
            <sl-tooltip for="return-to-AiNode">back to all AI nodes</sl-tooltip>
            <sl-button id="return-to-AiNode" variant="primary" href="{{ SITE_BASE_URL }}{{ pageUri }}">
              <i class="fa-solid fa-angle-left"></i>
              all AI nodes
            </sl-button>
          </div>
{% include en-us/search/ai-node/AiNodeSearchButtons.htm %}
{% include en-us/search/ai-node/AiNodeSearchForm.htm %}
          <h1 class="Page_title"><i class="fa-regular fa-computer"></i> {{ result.title | e }}</h1>
    {% else %}
          <sl-tooltip for="return-to-AiNode">back to all AI nodes</sl-tooltip>
        <div>
            <sl-button id="return-to-AiNode" variant="primary" href="{{ SITE_BASE_URL }}{{ pageUri }}">
              <i class="fa-solid fa-angle-left"></i>
              all AI nodes
            </sl-button>
          </sl-tooltip>
        </div>
        <h1><i class="fa-regular fa-computer"></i> <span>AI nodes</span></h1>
{% include en-us/search/ai-node/AiNodeSearchButtons.htm %}
{% include en-us/search/ai-node/AiNodeSearchForm.htm %}
        <h2>
          <span>
  {% if classIconCssClasses is defined %}
            <i class="{{ classIconCssClasses }}  site-menu-icon "></i>
  {% endif %}
            <span class="">no AI node found</span>
          </span>
        </h2>
    {% endif %}
  {% else %}
          <sl-tooltip for="return-to-AiNode">back to all AI nodes</sl-tooltip>
        <div>
            <sl-button id="return-to-AiNode" variant="primary" href="{{ SITE_BASE_URL }}{{ pageUri }}">
              <i class="fa-solid fa-angle-left"></i>
              all AI nodes
            </sl-button>
          </sl-tooltip>
        </div>
        <h1><i class="fa-regular fa-computer"></i> <span>AI nodes</span></h1>
{% include en-us/search/ai-node/AiNodeSearchButtons.htm %}
{% include en-us/search/ai-node/AiNodeSearchForm.htm %}
        <h2>
          <span>
  {% if classIconCssClasses is defined %}
            <i class="{{ classIconCssClasses }}  site-menu-icon "></i>
  {% endif %}
            <span class="">no AI node found</span>
          </span>
        </h2>
  {% endif %}
{% endif %}
{%- block htmFormAiNodePage %}
          <form action="/en-us/api/ai-node" id="AiNodeForm" class="pageForm " onsubmit="event.preventDefault(); return false; ">
{% if entityId is defined %}
            <input name="entityId" class="valueEntityId" type="hidden" value="{{entityId}}"/>
            {% endif %}
            <input name="focusId" type="hidden"/>
            <input name="pageResponse" id="pageResponse" class="pageResponse"  value='{{ toJsonObjectStringInApostrophes(pageResponse) }}' type="hidden"/>
            <input name="result" id="result" class="result"  value='{{ toJsonObjectStringInApostrophes(result) }}' type="hidden"/>
            <input name="listAiNode" id="listAiNode" class="listAiNode"  value='{{ toJsonArrayStringInApostrophes(listAiNode) }}' type="hidden"/>
          </form>
  {% if solrId is defined %}
          {{ htmButton_searchpageAiNode() }}
          {{ htmForm_searchpageAiNode() }}
  {% endif %}
{%- endblock htmFormAiNodePage %}
        </div>
{%- endblock htmBodyMiddleAiNodePage %}
{%- endblock htmBodyMiddlePageLayout %}

{%- block htmBodyEndPageLayout %}
      {{ super() }}
{%- block htmBodyEndAiNodePage %}
{%- endblock htmBodyEndAiNodePage %}
{%- endblock htmBodyEndPageLayout %}
{%- macro inputPkAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_pk">
  {%- endif %}
                  <sl-input
                      readonly
                      placeholder="[Long] primary key"
                      label="primary key"
                      help-text="
The primary key of this object in the database"
                      id="{{classApiMethodMethod}}_pk"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_pk setPk classAiNode inputAiNode{{entityId}}Pk "
                      name="setPk"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_pk setPk classAiNode inputAiNode{{entityId}}Pk "
                      name="setPk"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_pk valuePk classAiNode inputAiNode{{entityId}}Pk "
                      name="pk"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.pk | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmPkAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputPkAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputCreatedAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_created">
  {%- endif %}
                  <sl-input
                      type="text"
                      readonly
                      help-text="A created timestamp for this record in the database"
                      label="created"
                      class="label-on-left {{classApiMethodMethod}}_created datetimepicker setCreated classAiNode inputAiNode{{entityId}}Created "
                      placeholder="MM/dd/yyyy h:mm a '['VV']'"
                      data-timeformat="MM/dd/yyyy h:mm a '['VV']'"
                      id="{{classApiMethodMethod}}_created"
                      value="{%- if result.created is defined %}{{ formatZonedDateTime(result.created, "MM/dd/yyyy h:mm a '['VV']'", defaultLocaleId, defaultZoneId) | e }}{%- endif %}"
  {%- if 'Page' == classApiMethodMethod %}
  {%- endif %}
                      data-entityId={{ result.entityId | tojson }}
                      >
                  </sl-input>
  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmCreatedAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputCreatedAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputModifiedAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_modified">
  {%- endif %}
                  <sl-input
                      type="text"
                      readonly
                      help-text="A modified timestamp for this record in the database"
                      label="modified"
                      class="label-on-left {{classApiMethodMethod}}_modified datetimepicker setModified classAiNode inputAiNode{{entityId}}Modified "
                      placeholder="MM/dd/yyyy h:mm a '['VV']'"
                      data-timeformat="MM/dd/yyyy h:mm a '['VV']'"
                      id="{{classApiMethodMethod}}_modified"
                      value="{%- if result.modified is defined %}{{ formatZonedDateTime(result.modified, "MM/dd/yyyy h:mm a '['VV']'", defaultLocaleId, defaultZoneId) | e }}{%- endif %}"
  {%- if 'Page' == classApiMethodMethod %}
  {%- endif %}
                      data-entityId={{ result.entityId | tojson }}
                      >
                  </sl-input>
  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmModifiedAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputModifiedAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputArchivedAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_archived">
  {%- endif %}
  {%- if 'Page' == classApiMethodMethod %}
                  <sl-button variant="primary"
                      id="{{classApiMethodMethod}}_archived"
                      placeholder="archive"
                      label="archive"
                      help-text="For archiving this record"
                      class="label-on-left {{classApiMethodMethod}}_archived classAiNode inputAiNode{{entityId}}Archived "
                      name="setArchived"
                      data-entityId={{ result.entityId | tojson }}
                      data-val="{{ result.archived | e }}"
                      >archive</sl-button>
  {%- else %}
  {%- if 'Page' == classApiMethodMethod %}
                  <sl-checkbox
                      id="{{classApiMethodMethod}}_archived"
                      value="true"
  {%- else %}
                  <sl-select
                      id="{{classApiMethodMethod}}_archived"
  {%- endif %}
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="archive"
                      label="archive"
                      help-text="For archiving this record"
  {%- if 'Page' == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_archived classAiNode inputAiNode{{entityId}}Archived "
                      name="setArchived"
  {%- else %}
    {%- if 'Page' == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_archived classAiNode inputAiNode{{entityId}}Archived "
                      name="setArchived"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_archived setArchived valueArchived classAiNode inputAiNode{{entityId}}Archived "
                      name="setArchived"
    {%- endif %}
  {%- endif %}
  {%- if 'Page' == classApiMethodMethod %}
    {%- if result.archived == true %}
                      checked
    {%- endif %}
                      data-entityId={{ result.entityId | tojson }}
                      >archive</sl-checkbox>
  {%- else %}
                      >
                    <sl-option value="" selected="selected"></sl-option>
                    <sl-option value="true">true</sl-option>
                    <sl-option value="false">false</sl-option>
                  </sl-select>
  {%- endif %}
  {%- endif %}
  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmArchivedAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputArchivedAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputClusterNameAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_clusterName">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[String] cluster name"
                      label="cluster name"
                      help-text="
The name of this cluster"
                      id="{{classApiMethodMethod}}_clusterName"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_clusterName setClusterName classAiNode inputAiNode{{entityId}}ClusterName "
                      name="setClusterName"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_clusterName setClusterName classAiNode inputAiNode{{entityId}}ClusterName "
                      name="setClusterName"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_clusterName valueClusterName classAiNode inputAiNode{{entityId}}ClusterName "
                      name="clusterName"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.clusterName | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmClusterNameAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputClusterNameAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputNodeNameAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_nodeName">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[String] node name"
                      label="node name"
                      help-text="
The name of this node"
                      id="{{classApiMethodMethod}}_nodeName"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_nodeName setNodeName classAiNode inputAiNode{{entityId}}NodeName "
                      name="setNodeName"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_nodeName setNodeName classAiNode inputAiNode{{entityId}}NodeName "
                      name="setNodeName"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_nodeName valueNodeName classAiNode inputAiNode{{entityId}}NodeName "
                      name="nodeName"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.nodeName | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmNodeNameAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputNodeNameAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputDescriptionAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_description">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[String] description"
                      label="description"
                      help-text="
A description of this node"
                      id="{{classApiMethodMethod}}_description"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_description setDescription classAiNode inputAiNode{{entityId}}Description "
                      name="setDescription"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_description setDescription classAiNode inputAiNode{{entityId}}Description "
                      name="setDescription"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_description valueDescription classAiNode inputAiNode{{entityId}}Description "
                      name="description"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.description | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmDescriptionAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputDescriptionAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputEntityIdAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_entityId">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[String] entity ID"
                      label="entity ID"
                      help-text="
A unique ID for this Smart Data Model"
                      id="{{classApiMethodMethod}}_entityId"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_entityId setEntityId classAiNode inputAiNode{{entityId}}EntityId "
                      name="setEntityId"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_entityId setEntityId classAiNode inputAiNode{{entityId}}EntityId "
                      name="setEntityId"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_entityId valueEntityId classAiNode inputAiNode{{entityId}}EntityId "
                      name="entityId"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.entityId | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmEntityIdAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputEntityIdAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputGpuDevicesTotalAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_gpuDevicesTotal">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[Integer] GPU devices total"
                      label="GPU devices total"
                      help-text="
The total number of GPU devices on this cluster. "
                      id="{{classApiMethodMethod}}_gpuDevicesTotal"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_gpuDevicesTotal setGpuDevicesTotal classAiNode inputAiNode{{entityId}}GpuDevicesTotal "
                      name="setGpuDevicesTotal"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_gpuDevicesTotal setGpuDevicesTotal classAiNode inputAiNode{{entityId}}GpuDevicesTotal "
                      name="setGpuDevicesTotal"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_gpuDevicesTotal valueGpuDevicesTotal classAiNode inputAiNode{{entityId}}GpuDevicesTotal "
                      name="gpuDevicesTotal"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.gpuDevicesTotal | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmGpuDevicesTotalAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputGpuDevicesTotalAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputLocationAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_location">
  {%- endif %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[Point] location"
                      label="location"
                      help-text="
Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon"
                      id="{{classApiMethodMethod}}_location"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_location setLocation classAiNode inputAiNode{{entityId}}Location "
                      name="setLocation"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_location setLocation classAiNode inputAiNode{{entityId}}Location "
                      name="setLocation"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_location valueLocation classAiNode inputAiNode{{entityId}}Location "
                      name="location"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{ toJsonObjectString(result.location) | e }}"
  {%- endif %}
                      ></sl-input>

  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmLocationAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputLocationAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
{%- macro inputDisplayPageAiNodePage(classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) %}
  {%- if 'Page' == classApiMethodMethod %}
                <form class="subgrid-2col " id="PageForm_displayPage">
  {%- endif %}
  {%- if 'Page' == classApiMethodMethod %}
                  <sl-button variant="primary"
                      id="{{classApiMethodMethod}}_displayPage"
                      placeholder="[String] product page"
                      label="product page"
                      help-text="Visit this product's landing page. "
                      class="button-on-left {{classApiMethodMethod}}_displayPage classAiNode inputAiNode{{entityId}}DisplayPage "
                      name="setDisplayPage"
                      href="{{ result.displayPage | e }}"
                      >
                    product page
                  </sl-button>
                  <div class="button-description-on-right ">Visit this product's landing page. </div>
  {%- else %}
                  <sl-input
                      {% if authForWriteBool == true %}clearable{% else %}readonly{% endif %}
                      placeholder="[String] product page"
                      label="product page"
                      help-text="
Visit this product's landing page. "
                      id="{{classApiMethodMethod}}_displayPage"
  {%- if "Page" == classApiMethodMethod %}
                      data-entityId={{ result.entityId | tojson }}
                      class="label-on-left {{classApiMethodMethod}}_displayPage setDisplayPage classAiNode inputAiNode{{entityId}}DisplayPage "
                      name="setDisplayPage"
  {%- else %}
    {%- if "PATCH" == classApiMethodMethod %}
                      class="label-on-left {{classApiMethodMethod}}_displayPage setDisplayPage classAiNode inputAiNode{{entityId}}DisplayPage "
                      name="setDisplayPage"
    {%- else %}
                      class="label-on-left {{classApiMethodMethod}}_displayPage valueDisplayPage classAiNode inputAiNode{{entityId}}DisplayPage "
                      name="displayPage"
    {%- endif %}
  {%- endif %}
  {%- if "Page" == classApiMethodMethod %}
                      value="{{result.displayPage | e }}"
  {%- endif %}
                      ></sl-input>

  {%- endif %}
  {%- if 'Page' == classApiMethodMethod %}
                </form>
  {%- endif %}
{%- endmacro %}

{%- macro htmDisplayPageAiNodePage(classApiMethodMethod, authForWriteBool=false, authForReadBool=false) %}
                            {{ inputDisplayPageAiNodePage(classApiMethodMethod=classApiMethodMethod, authForWrite=authForWrite, authForRead=authForRead) }}
{%- endmacro %}
