{% extends "en-us/edit/ai-cluster/AiClusterGenEditPage.htm" %}
{%- block htmBodyStartAiClusterPage %}
{{ super() }}
<wa-details open class="HtmRow" id="observability-dashboard">
  <div slot="summary">
    Observability dashboard for cluster {{ result.clusterName }}
  </div>
  <div class="wa-stack ">
    <div class="wa-grid ">
      <div class="wa-stack ">
        <div class="wa-grid ">
          <wa-card with-header>
            <header slot="header" class="wa-heading-l ">Number of GPU nodes in cluster {{ result.clusterName }}</header>
            <div id="visualization-cluster-gpu-nodes" class="wa-frame "></div>
          </wa-card>
          <wa-card with-header>
            <header slot="header" class="wa-heading-l ">Number of GPU devices in cluster {{ result.clusterName }}</header>
            <div id="visualization-cluster-gpu-devices" class="wa-frame "></div>
          </wa-card>
        </div>
        <wa-card with-header>
          <header slot="header" class="wa-heading-m ">GPU Nodes in not ready state in cluster {{ result.clusterName }}</header>
          <div id="visualization-gpu-nodes-not-ready" class="wa-grid "></div>
        </wa-card>
      </div>
      <wa-card with-header>
        <header slot="header" class="wa-heading-l ">Number of GPU devices per node in cluster {{ result.clusterName }}</header>
        <div id="visualization-cluster-gpu-devices-by-node" class="wa-grid "></div>
      </wa-card>
    </div>
    <div class="wa-grid ">
      <wa-card with-header>
        <header slot="header" class="wa-heading-l ">GPU temperature per GPU device in cluster {{ result.clusterName }}</header>
        <div id="visualization-cluster-gpu-temperature" class="wa-grid "></div>
      </wa-card>
    </div>
    <div class="wa-grid ">
      <wa-card with-header>
        <header slot="header" class="wa-heading-l ">GPU utilization per GPU device in cluster {{ result.clusterName }}</header>
        <div id="visualization-cluster-gpu-utilization" class="wa-grid "></div>
      </wa-card>
    </div>
  </div>
</wa-details>
{%- endblock htmBodyStartAiClusterPage %}
{%- block htmStyleAiClusterPage %}
#visualization-cluster-gpu-nodes, #visualization-cluster-gpu-devices {
  wa-avatar {
    --size: 3em;
  }
}
#observability-dashboard {
  .pill {
    border-radius: var(--wa-border-radius-pill);
    box-shadow: var(--wa-theme-glossy-inner-shine), var(--wa-theme-glossy-top-highlight), inset 0 .7rem 0 0 rgba(255, 255, 255, 0.1), var(--wa-theme-glossy-lower-shade), var(--wa-theme-glossy-bottom-shadow);
    &:hover {
     background-color: var(--background-color-hover, var(--background-color));
      border-color: var(--border-color-hover, var(--border-color, var(--background-color-hover)));
      color: var(--text-color-hover, var(--text-color));
    }
  }
}
{%- endblock htmStyleAiClusterPage %}
{%- block htmScriptsAiClusterPage %}
{{ super() }}
  <script type="module">
    Promise.all([
      customElements.whenDefined('wa-button')
      , customElements.whenDefined('wa-input')
    ]).then(() => {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 1));
      var query = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '5'
      };

      Promise.all([
          queryGpuNodesTotal()
          , queryGpuDevicesByNode()
          , queryGpuDevicesTotal()
          , queryGpuNodesNotReady()
          , queryGpuTemperature()
          , queryGpuUtilization()
          ]);
    });

    async function queryGpuNodesTotal() {
      var query = Object.assign({ query: 'sum(gpu_operator_gpu_nodes_total{cluster="{{ result.clusterName }}"})' });
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {

          var avatar = document.createElement('wa-avatar');
          avatar.setAttribute('initials', responseJson.data.result[0].value[1])
          avatar.setAttribute('class', 'wa-accent wa-brand wa-heading-3xl ');
          avatar.setAttribute('slot', 'icon');
          document.querySelector('#visualization-cluster-gpu-nodes').append(avatar);
        });
      } else {
        throw new Error(`Failed to query GPU nodes total: ${response.status}`);
      }
    }

    async function queryGpuDevicesByNode() {
      var query = Object.assign({ query: 'sum(gpu_operator_node_device_plugin_devices_total{cluster="{{ result.clusterName }}"}) by (cluster, node)' });
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var panelId = 'visualization-cluster-gpu-devices-by-node';
          responseJson.data.result.forEach((result, i) => {
            var elemId = 'visualization-cluster-gpu-devices-by-node-' + result.metric.cluster + '-' + result.metric.node;

            var a = document.createElement('a');
            a.setAttribute('href', '/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node);
            document.querySelector('#' + panelId).append(a);

            var callout = document.createElement('wa-callout');
            callout.setAttribute('id', elemId);
            callout.setAttribute('appearance', 'outlined');
            callout.setAttribute('variant', 'neutral');
            callout.setAttribute('class', 'pill');
            a.append(callout);

            var avatar = document.createElement('wa-avatar');
            avatar.setAttribute('initials', result.value[1])
            avatar.setAttribute('class', 'wa-accent wa-brand ');
            avatar.setAttribute('slot', 'icon');
            callout.append(avatar);

            var stack = document.createElement('div');
            stack.setAttribute('class', 'wa-stack wa-gap-s ')
            callout.append(stack);

            var elem0 = document.createElement('div');
            elem0.innerText = result.metric.cluster;
            stack.append(elem0);

            var elem1 = document.createElement('div');
            elem1.innerText = result.metric.node;
            stack.append(elem1);

            // <i class="fa-regular fa-computer" aria-hidden="true"></i>
          });
        });
      } else {
        throw new Error(`Failed to query GPU nodes total: ${response.status}`);
      }
    }

    async function queryGpuDevicesTotal() {
      var query = Object.assign({ query: 'sum(gpu_operator_node_device_plugin_devices_total{cluster="{{ result.clusterName }}"})' });
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {

          var avatar = document.createElement('wa-avatar');
          avatar.setAttribute('initials', responseJson.data.result[0].value[1])
          avatar.setAttribute('class', 'wa-accent wa-brand wa-heading-3xl ');
          avatar.setAttribute('slot', 'icon');
          document.querySelector('#visualization-cluster-gpu-devices').append(avatar);
        });
      } else {
        throw new Error(`Failed to query GPU nodes total: ${response.status}`);
      }
    }

    async function queryGpuNodesNotReady() {
      var query = Object.assign({ query: 'kube_node_status_condition{cluster="{{ result.clusterName }}", status="unknown", condition="Ready"} * on (cluster, node) group_left(label_nvidia_com_gpu_present) kube_node_labels{label_nvidia_com_gpu_present="true"} == 1' });
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var panelId = 'visualization-gpu-nodes-not-ready';
          responseJson.data.result.forEach((result, i) => {
            var elemId = 'visualization-gpu-nodes-not-ready-' + result.metric.cluster + '-' + result.metric.node;

            var a = document.createElement('a');
            a.setAttribute('href', '/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node);
            document.querySelector('#' + panelId).append(a);

            var callout = document.createElement('wa-callout');
            callout.setAttribute('id', elemId);
            callout.setAttribute('appearance', 'accent outlined');
            callout.setAttribute('variant', 'danger');
            callout.setAttribute('class', 'pill');
            a.append(callout);

            var icon = document.createElement('wa-icon');
            icon.setAttribute('slot', 'icon')
            icon.setAttribute('name', 'triangle-exclamation')
            icon.setAttribute('variant', 'solid')
            callout.append(icon);

            var stack = document.createElement('div');
            stack.setAttribute('class', 'wa-stack wa-gap-s ')
            callout.append(stack);

            var elem0 = document.createElement('div');
            elem0.innerText = result.metric.cluster;
            stack.append(elem0);

            var elem1 = document.createElement('div');
            elem1.innerText = result.metric.node;
            stack.append(elem1);
          });
        });
      } else {
        throw new Error(`Failed to query nodes not ready: ${response.status}`);
      }
    }

    async function queryGpuTemperature() {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 1));
      var timeQuery = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '100'
      };
      var query = Object.assign(Object.assign({ query: 'sum(DCGM_FI_DEV_MEMORY_TEMP{cluster="{{ result.clusterName }}"}) by (cluster,Hostname,modelName,UUID)' }, timeQuery));
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query_range?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var end = new Date();
          var start = new Date(new Date().setHours(end.getHours() - 1));

          var panelId = 'visualization-cluster-gpu-temperature';
          var traces = [];
          var results = responseJson.data.result;
          results.forEach((result, i) => {
            traces.push({
              x: result.values.map(values => new Date(values[0]))
              , y: result.values.map(values => parseFloat(values[1]))
              , mode: 'lines+markers'
              , name: result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName
              , text: result.values.map(values => '<a href="/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node + '">' + result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName + '</a>')
            });
          });

          var layout = {
          };
          Plotly.newPlot(panelId, traces, layout);
        });
      } else {
        throw new Error(`Failed to query nodes not ready: ${response.status}`);
      }
    }

    async function queryGpuUtilization() {
      var end = new Date();
      var start = new Date(new Date().setHours(end.getHours() - 1));
      var timeQuery = {
        start: start.toISOString()
        , end: end.toISOString()
        , step: '100'
      };
      var query = Object.assign(Object.assign({ query: 'sum(DCGM_FI_DEV_GPU_UTIL{cluster="{{ result.clusterName }}"}) by (cluster,Hostname,modelName,UUID)' }, timeQuery));
      var response = await fetch( '/prom-keycloak-proxy/api/v1/query_range?' + new URLSearchParams(query).toString(), { method: 'GET' });
      if(response.ok) {
        response.json().then(function(responseJson) {
          var end = new Date();
          var start = new Date(new Date().setHours(end.getHours() - 1));

          var panelId = 'visualization-cluster-gpu-utilization';
          var traces = [];
          var results = responseJson.data.result;
          results.forEach((result, i) => {
            traces.push({
              x: result.values.map(values => new Date(values[0]))
              , y: result.values.map(values => parseFloat(values[1]))
              , mode: 'lines+markers'
              , name: result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName
              , text: result.values.map(values => '<a href="/en-us/edit/ai-node/' + result.metric.cluster + '-' + result.metric.node + '">' + result.metric.cluster + ' ' + result.metric.Hostname + ' ' + result.metric.modelName + '</a>')
            });
          });

          var layout = {
          };
          Plotly.newPlot(panelId, traces, layout);
        });
      } else {
        throw new Error(`Failed to query nodes not ready: ${response.status}`);
      }
    }
  </script>
{%- endblock htmScriptsAiClusterPage %}
